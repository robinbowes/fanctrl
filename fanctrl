#!/usr/bin/env perl

=head1 NAME

fanctrl - control the speed of fans using ipmitool

=head1 SYNOPSIS

    fanctrl [OPTIONS] get name1 [name2 ...]
    fanctrl [OPTIONS] set name1=value1 [name2=value2 ...]
    fanctrl [OPTIONS] list 

=head1 DESCRIPTION

Set the speed of chassis fans using ipmitool

=head1 OPTIONS

=over 4

=item B<--some_option>

Describe some_option here

=back

Where I<name> is the name of a fan (use list to see available fans)
      I<name> is 0 for smart control, or 1-100% of max fan speed

Examples:

    fanctrl set REAR_FAN1=60 REAR_FAN2=70

=head1 AUTHOR

Copyright (c) 2016 Robin Bowes <robin.bowes@yo61.com>
=cut

package main;

# The command to set fan speed from ipmitool is as follows:
#                        AA   BB   CC   DD   EE   FF   GG   HH
# ipmitool raw 0x3a 0x01 0x64 0x00 0x64 0x00 0x00 0x64 0x00 0x00
#
# The first args indicated this is a command to set the fan speeds,
# The final 8 args represent the speed to which the fans should be set
# The values should be 0-100 in hex (0x00 - 0x64) where 0 = smart control
# and 1-100 is the % of max speed
# Each positional argument represents the following fans:
# AA - CPU_FAN1
# BB - CPU_FAN2
# CC - REAR_FAN1
# DD - REAR_FAN2
# EE - FRNT_FAN1
# FF - FRNT_FAN2
# GG - ?
# HH - ?

use strict;
use warnings;

my @valid_fan_names;

my %fan_name_index = (
  'CPU_FAN1' => 0,
  'CPU_FAN2' => 1,
  'REAR_FAN1' => 2,
  'REAR_FAN2' => 3,
  'FRNT_FAN1' => 4,
  'FRNT_FAN2' => 5,
);

my $IPMITOOLCMD = 'ipmitool';

use Getopt::Long qw(:config auto_help);
use Pod::Usage;

exit main();

sub main {

  # dispatch table for valid commands
  my %valid_commands = (
    get => \&get,
    list => \&list,
    set => \&set,
  );

  GetOptions () or pod2usage(1);
  pod2usage(1) unless @ARGV;

  @valid_fan_names = get_valid_fans();

  # the first arg is the command
  my $command = shift @ARGV;

  # make sure the command is valid
  pod2usage(1) unless grep{$_ eq $command} keys(%valid_commands);

  # run the sub implementing the command
  $valid_commands{$command}->(@ARGV);
}

# get the values of the specified fans
# if no args specified, get all values
sub get {
  pod2usage(1) unless validate_get_args(@_);
  foreach my $param (@_) {
    my $command = "$IPMITOOLCMD sensor get $param | awk '/Reading/ {print \$4}' 2>/dev/null";
    my $output = qx($command);
    print $output;
  }
}

# list all fans found in the chassis
# expects no args
sub list {
  # Dump the keys defined in this script
  pod2usage(1) if @_;
  print join( ',', @valid_fan_names) . "\n";
}

# set the values of the specified fans
# expects at least one ARG
# ARGS in format Name=value
sub set {
  pod2usage(1) unless validate_set_args(@_);
  set_fan_values(@_);
}

sub validate_get_args {
  return 1;
}

sub validate_set_args {
  # must be at least one arg
  return unless @_;

  # initialise array with 8 hex values
  my @validated_args = (('0x00')x8);

  # validate all items passed in
  foreach my $item (@_) {
    my $index = 0;
    my ($name, $value) = split(/=/, $item);

    # the name must be valid
    return 0 unless grep{$_ eq $name} @valid_fan_names;

    # The value should be between 0-100
    return 0 unless grep{/^$value$/} (0..100);
    $index++;
  }
  return 1
}

sub set_fan_values {
  # initialise array with 8 hex values
  my @hex_values = (('0x00')x8);
  foreach my $item (@_) {
    my ($name, $value) = split(/=/, $item);
    $hex_values[$fan_name_index{$name}] = sprintf("0x%x", $value);
  }
  my @command_args = ($IPMITOOLCMD, 'raw', '0x3a', '0x01');
  push @command_args, @hex_values;
  system @command_args;
}

sub get_valid_fans {
  my @sensors = qx(ipmitool sensor list | awk '/FAN/ {print \$1}' 2>/dev/null);
  #print(@sensors);

  my @valid_fan_names = ();

  foreach (@sensors) {
    chomp;
    my $get_command = "ipmitool sensor get $_ | grep 'Status\\s*:\\s*ok' 2>/dev/null";
    #print("$get_command\n");
    my @output = qx($get_command);
    if ($? == -1) {
      print "failed to execute: $!\n";
    }
    elsif ($? & 127) {
      printf "child died with signal %d, %s coredump\n",
            ($? & 127),  ($? & 128) ? 'with' : 'without';
    }
    else {
      my $exit_code = $? >> 8;
      unless ($exit_code == 0 or $exit_code ==1) {
        printf "child exited with value %d\n", $? >> 8;
      }
    }
    chomp(@output);
    #print("{@output} - " . scalar(@output) . "\n");
    if (scalar @output == 1) {
      #print("$_\n");
      push(@valid_fan_names, $_);
      #print("Fan names: " . join(",", @valid_fan_names), "\n");
    }
  }
  return @valid_fan_names
}
